@import '~@angular/material/theming';

@import './themes.scss';


@function theme_prop($theme) {
    $prop : (
        accent : map-get($theme , accent ),
        primary : map-get($theme , primary ),
        warn : map-get($theme , warn ),
        foreground : map-get($theme, foreground),   
        lightcolor : mat-color(map-get($theme , primary ),50),
        darkcolor : mat-color(map-get($theme , primary ),900),
        sucsesscolor : mat-color($mat-green,900),
        sucsessbgcolor : mat-color($mat-green,400,0.7)
    );
    @return $prop 
}

@mixin inherit_theme($theme) {

    $accent : map-get($theme , accent );
    $primary : map-get($theme , primary );
    $warn : map-get($theme , warn );
    $foreground : map-get($theme, foreground);
    $lightcolor : mat-color($primary,50,0.85);
    $darkcolor  : mat-color($accent,900);
    $activecolor: mat-color($accent, 50, 1); 


    .light {

        outline: none !important;
        background: $activecolor;
        color: $darkcolor !important;
    
        &:hover {
            outline: none !important;  
            background-color: mat-color($accent, 400) !important;
            color: $activecolor !important;
        }
    
        &:focus {
            outline: none !important;  
            background-color: mat-color($accent, 400) !important;
            color: $activecolor !important;
        }
    }


    .dark {
        outline: none !important;
        background: $darkcolor;
        color: $lightcolor !important;
    
        &:hover {
            outline: none !important;  
            background: $darkcolor !important;
            color: $activecolor !important;
        }
    
        &:focus {
            outline: none !important;
            background: $darkcolor !important;
            color: $activecolor !important;
        }
      }
    
    .primary {
        background-color: mat-color($accent, 200);
        color: $darkcolor !important;
    
        &:hover {
          background: mat-color($accent, 500) !important;
          color: $lightcolor !important;
        }
    }
    
    .secondry {
        background-color: mat-color($accent, 700) !important;
        color: mat-color($accent, 100) !important;
        border-bottom: 1px solid mat-color($primary, 400);
    
        &:hover {
          background: mat-color($accent, 600) !important;
          color: $lightcolor !important;
        }
    }
      
    .warning {
        background-color: mat-color($warn, 500) !important;
        color: $lightcolor !important;
        border-bottom: 1px solid mat-color($primary, 400);
    
        &:hover {
          background: mat-color($warn, 900) !important;
          color: $lightcolor !important;
        }
      }
    
    .vertical-litle-button {
        height: 1fr !important;
    }

    

    ::-webkit-scrollbar {
        width: 5%;
        max-width: 10px;
        min-width: 4px;
        padding-right: 1px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: mat-color($primary,700); 
        border-radius: 5px 5px 5px 5px;
        opacity : 0;
    }
    
    
    ::-webkit-scrollbar-thumb:hover {
        opacity : 1;
    }
  
}

@mixin custom-inherit-theme($app-theme) {
    @include angular-material-theme($app-theme);  
    @include inherit_theme($app-theme);   
}

@mixin mix-themes($accent, $primary, $warn, $bg-rimary-strenth) {
    $lightcolor: mat-color($accent, 50, .8);
    $activecolor: mat-color($accent, 50, 1);
    $darkcolor: mat-color($accent, 900);
       
    .link-active {
      color: $darkcolor !important;
      opacity: 1 !important;
      font-size: 120%;
      font-weight: bolder;
    }
  
    .light {

        outline: none !important;
        background: $activecolor;
        color: $darkcolor !important;
    
        &:hover {
            outline: none !important;  
            background-color: mat-color($accent, 400) !important;
            color: $activecolor !important;
        }
    
        &:focus {
            outline: none !important;  
            background-color: mat-color($accent, 400) !important;
            color: $activecolor !important;
        }
    }


    .dark {
      outline: none !important;
      background: $darkcolor;
      color: $lightcolor !important;
  
      &:hover {
          outline: none !important;  
          background: $darkcolor !important;
          color: $activecolor !important;
      }
  
      &:focus {
          outline: none !important;
          background: $darkcolor !important;
          color: $activecolor !important;
      }
    }
  
    .primary {
      outline: none !important;
      background-color: mat-color($accent, $bg-rimary-strenth);
      color: $darkcolor !important;
  
      &:hover {
        background: mat-color($accent, 500) !important;
        color: $lightcolor !important;
      }
    }
  
    .secondry {
      outline: none !important;
      background-color: mat-color($accent, 700) !important;
      color: mat-color($accent, 100) !important;
      border-bottom: 1px solid mat-color($primary, 400);
  
      &:hover {
        background: mat-color($accent, 600) !important;
        color: $lightcolor !important;
      }
    }
  
    .warning {
      outline: none !important;
      background-color: mat-color($warn, 500) !important;
      color: $lightcolor !important;
      border-bottom: 1px solid mat-color($primary, 400);
  
      &:hover {
        background: mat-color($warn, 900) !important;
        color: $lightcolor !important;
      }
    }
  
  }

::ng-deep .brown {
    @include custom-inherit-theme($brown-app-theme);
    $theme_prop: theme_prop($brown-app-theme);
    @include mix-themes(map-get($theme_prop, accent), map-get($theme_prop, primary),
    map-get($theme_prop, warn),200);
}

::ng-deep .grey {
    @include custom-inherit-theme($grey-app-theme);
    $theme_prop: theme_prop($grey-app-theme);
    @include mix-themes(map-get($theme_prop, accent), map-get($theme_prop, accent),
    map-get($theme_prop, warn), 200);
}  

::ng-deep .contrast {
    @include custom-inherit-theme($contrast-app-theme);
    $theme_prop: theme_prop($contrast-app-theme);
    @include mix-themes(map-get($theme_prop, primary), map-get($theme_prop, primary),
    map-get($theme_prop, warn), 400);
}
